@page "/propostas-trabalho/{PropostaId:int}"
@using Frontend.DtoClasses
@using Frontend.DTOClasses
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Frontend.Services
@inject PropostaTrabalhoService PropostaService
@inject PropostaHabilidadeService PropostaHabilidadeService
@inject PropostaTalentoService PropostaTalentoService
@inject UtilizadorService UtilizadorService
@inject ClienteService ClienteService
@inject CategoriaService CategoriaService
@inject HabilidadeService HabilidadeService
@inject TalentoService TalentoService
@inject NavigationManager Navigation
@inject EstadoService EstadoService


<PageTitle>Detalhes da Proposta</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Detalhes da Proposta</h3>
    <button class="btn btn-secondary" @onclick="VoltarParaLista">
        <i class="fas fa-arrow-left"></i> Voltar
    </button>
</div>

@if (!string.IsNullOrEmpty(mensagemSucesso))
{
    <div class="alert alert-success">
        @mensagemSucesso
    </div>
}

@if (proposta == null)
{
    <p class="text-danger">A proposta com o ID @PropostaId não foi encontrada.</p>
}
else
{
    <div class="card p-4 mb-4">
        <div class="row">
            <div class="col-md-6">
                <h5>@proposta.Nome</h5>
                <p><strong>Categoria:</strong> @proposta.NomeCategoria</p>
                <p><strong>Cliente:</strong> @GetClienteNome(proposta.ClienteId)</p>
            </div>
            <div class="col-md-6">
                <p><strong>Total de Horas:</strong> @proposta.TotalHoras</p>
                <p><strong>Estado:</strong>
                    @if (!isLoading && (isAdmin || proposta.UtilizadorId == UtilizadorIdLogado))
                    {
                        <InputSelect class="form-select d-inline w-auto" 
                                     Value="estadoSelecionado" 
                                     ValueChanged="async (int novoEstado) => await OnEstadoChanged(novoEstado)" 
                                     ValueExpression="@(() => estadoSelecionado)">
                            @foreach (var estado in estadosDisponiveis)
                            {
                                <option value="@estado.EstadoId">@estado.Nome</option>
                            }
                        </InputSelect>
                    }
                    else
                    {
                    <span class="badge @(GetBadgeClass(proposta.NomeEstado))">@proposta.NomeEstado</span>
                    }
                </p>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(proposta.Descricao))
        {
            <div class="mt-3">
                <strong>Descrição:</strong>
                <p class="mt-2">@proposta.Descricao</p>
            </div>
        }
    </div>

    <h4 class="mt-4">Habilidades Requeridas</h4>

    @if (habilidadesRequeridas == null || habilidadesRequeridas.Count == 0)
    {
        <p class="mb-3">Nenhuma habilidade específica requerida para esta proposta.</p>
    }
    else
    {
        <div class="row">
            @foreach (var hab in habilidadesRequeridas)
            {
                <div class="col-md-6 mb-3">
                    <div class="card">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@hab.NomeHabilidade</strong>
                                <small class="d-block text-muted">
                                    Mínimo: @hab.MinAnosExp @(hab.MinAnosExp == 1 ? "ano" : "anos") de experiência
                                </small>
                            </div>
                            @if (!isLoading && (isAdmin || proposta.UtilizadorId == UtilizadorIdLogado))
                            {
                                <div>
                                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditarHabilidade(hab)">Editar</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverHabilidade(hab.HabilidadeId)">Apagar</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (!isLoading && (isAdmin || proposta.UtilizadorId == UtilizadorIdLogado))
    {
        <button class="btn btn-success mt-1" @onclick="() => { editandoHabilidade = false; mostrarFormularioHabilidade = true; }">
            Adicionar Habilidade Requerida
        </button>
    }

    @if (habilidadesRequeridas == null || habilidadesRequeridas.Count == 0)
    {
        <h4 class="mt-4">Talentos Associados</h4>
        <p class="mb-3 text-muted">Por favor, adicione pelo menos uma habilidade para associar talentos.</p>
    }
    else
    {
        <h4 class="mt-3">Talentos Associados</h4>

        @if (talentosSelecionados == null || talentosSelecionados.Count == 0)
        {
            <p class="mb-3">Nenhum talento associado a esta proposta.</p>
        }
        else
        {
            <div class="row">
                @foreach (var talento in talentosSelecionados)
                {
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-body d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@talento.NomeTalento</strong>
                                </div>
                                @if (!isLoading && (isAdmin || proposta.UtilizadorId == UtilizadorIdLogado))
                                {
                                    <div>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoverTalento(talento.TalentoId)">Apagar</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (!isLoading && (isAdmin || proposta.UtilizadorId == UtilizadorIdLogado))
        {
            <button class="btn btn-success mt-1" @onclick="() => { mostrarFormularioTalento = true; }">
                Adicionar Talento
            </button>
        }
    }

    <h4 class="mt-5">Talentos Elegíveis</h4>

    @if (carregandoTalentos)
    {
        <p>Carregando talentos elegíveis…</p>
    }
    else if (talentosElegiveis == null || !talentosElegiveis.Any())
    {
        <p class="text-muted">Nenhum talento atende a todos os requisitos.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Nome</th>
                <th>Email</th>
                <th>Preço / Hora</th>
                <th>Horas</th>
                <th>Valor Total</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var t in talentosElegiveis)
            {
                <tr>
                    <td>@t.Nome</td>
                    <td>@t.Email</td>
                    <td>@t.PrecoHora.ToString("C")</td>
                    <td>@t.TotalHoras</td>
                    <td>@t.TotalValue.ToString("C")</td>
                </tr>
            }
            </tbody>
        </table>
    }
    
    @if (mostrarFormularioHabilidade)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="habilidadeModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="habilidadeModalTitle">
                            @(editandoHabilidade ? "Editar" : "Adicionar") Habilidade Requerida
                        </h5>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="novaHabilidade" OnValidSubmit="HandleHabilidadeSubmit">
                            <DataAnnotationsValidator />
                            @if (!string.IsNullOrEmpty(validacaoMensagemHabilidade))
                            {
                                <div class="alert alert-danger">
                                    @validacaoMensagemHabilidade
                                </div>
                            }
                            
                            @if (!editandoHabilidade)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Habilidade</label>
                                    <InputSelect class="form-select" @bind-Value="novaHabilidade.HabilidadeId">
                                        <option value="0">Selecione uma habilidade</option>
                                        @foreach (var hab in todasHabilidades)
                                        {
                                            <option value="@hab.Habilidadeid">@hab.Nome</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => novaHabilidade.HabilidadeId)" />
                                </div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Mínimo de Anos de Experiência</label>
                                <InputNumber class="form-control" @bind-Value="novaHabilidade.MinAnosExp" min="0" max="50"/>
                                <ValidationMessage For="@(() => novaHabilidade.MinAnosExp)"/>
                            </div>
                            
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => mostrarFormularioHabilidade = false">Cancelar</button>
                        <button type="button" class="btn btn-success" @onclick="HandleHabilidadeSubmit">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (mostrarFormularioTalento)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="talentoModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="talentoModalTitle">
                            Adicionar Talento
                        </h5>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="novoTalento" OnValidSubmit="HandleTalentoSubmit">
                            <DataAnnotationsValidator />
                            @if (!string.IsNullOrEmpty(validacaoMensagemTalento))
                            {
                                <div class="alert alert-danger">@validacaoMensagemTalento</div>
                            }

                            <div class="mb-3">
                                <label class="form-label">Talento</label>
                                <InputSelect class="form-select" @bind-Value="novoTalento.TalentoId">
                                    <option value="0">Selecione um talento</option>
                                    @foreach (var talento in talentosFiltrados)
                                    {
                                        <option value="@talento.Talentoid">@talento.Nome</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => novoTalento.TalentoId)" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => mostrarFormularioTalento = false">Cancelar</button>
                        <button type="button" class="btn btn-success" @onclick="HandleTalentoSubmit">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code {
    [Parameter]
    public int PropostaId { get; set; }

    private PropostaTrabalhoDTO? proposta;
    private List<PropostaHabilidadeDTO> habilidadesRequeridas = new();
    private List<HabilidadeDTO> todasHabilidades = new();
    private List<TalentoDTO> todosTalentos = new();
    private List<ClienteDTO>? clientes;
    private List<TalentosElegiveisDTO>? talentosElegiveis;
    private bool carregandoTalentos = true;
    private string? validacaoMensagemHabilidade;
    private bool isAdmin = false;
    private int? UtilizadorIdLogado;
    private bool isLoading = true;
    private string mensagemSucesso = "";
    private System.Timers.Timer timerMensagem;
    private List<EstadoDTO> estadosDisponiveis = new();
    private int estadoSelecionado;


    protected override async Task OnInitializedAsync()
    {
        proposta = await PropostaService.GetPropostaByIdAsync(PropostaId);
        await LoadHabilidades();
        await LoadTalentos();
        todasHabilidades = await HabilidadeService.GetAllHabilidadesAsync();
        todosTalentos = await TalentoService.GetAllTalentosAsync();
        clientes = await ClienteService.GetAllClientesAsync();
        estadosDisponiveis = await EstadoService.GetAllEstadosAsync() ?? new List<EstadoDTO>();
        talentosElegiveis = await PropostaService.GetTalentosElegiveisAsync(PropostaId);
        carregandoTalentos = false;

        if (proposta != null)
            estadoSelecionado = estadosDisponiveis.FirstOrDefault(e => e.Nome == proposta.NomeEstado)?.EstadoId ?? 1;
        
        FiltrarTalentosPorHabilidades();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UtilizadorIdLogado = await UtilizadorService.GetUserIdAsync();
            isAdmin = await UtilizadorService.IsAdminAsync(); 
            isLoading = false;  
            StateHasChanged();
        }
    }

    private async Task LoadHabilidades()
    {
        try
        {
            habilidadesRequeridas = await PropostaHabilidadeService.GetHabilidadesByPropostaIdAsync(PropostaId);  
            FiltrarTalentosPorHabilidades();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Erro ao carregar habilidades requeridas: {ex.Message}");
            habilidadesRequeridas = new List<PropostaHabilidadeDTO>();
        }
    }

    private string GetClienteNome(int clienteId)
    {
        var cliente = clientes?.FirstOrDefault(c => c.ClienteId == clienteId);
        return cliente != null ? cliente.Nome : "Desconhecido";
    }

    private void VoltarParaLista()
    {
        Navigation.NavigateTo("/propostas-trabalho");
    }
    private async Task AtualizarEstado()
    {
        try
        {
            var dtoAtualizado = new UpdatePropostaTrabalhoDTO
            {
                Nome = proposta.Nome,
                CategoriaId = proposta.CategoriaId,
                ClienteId = proposta.ClienteId,
                TotalHoras = proposta.TotalHoras,
                Descricao = proposta.Descricao,
                EstadoId = estadoSelecionado 
            };

            var response = await PropostaService.UpdatePropostaAsync(PropostaId, dtoAtualizado);
            if (response.IsSuccessStatusCode)
            {
                proposta = await PropostaService.GetPropostaByIdAsync(PropostaId);
                ExibirMensagemSucesso("Estado da proposta atualizado com sucesso!");
            }
            else
            {
                ExibirMensagemSucesso("Erro ao atualizar estado da proposta.");
            }
        }
        catch (Exception ex)
        {
            ExibirMensagemSucesso($"Erro ao atualizar estado: {ex.Message}");
        }
    }

    // Habilidade
    private bool mostrarFormularioHabilidade = false;
    private AddPropostaHabilidadeDTO novaHabilidade = new();
    private bool editandoHabilidade = false;
    private int habilidadeIdAtual = 0;

    private void EditarHabilidade(PropostaHabilidadeDTO habilidade)
    {
        editandoHabilidade = true;
        habilidadeIdAtual = habilidade.HabilidadeId;
        novaHabilidade = new AddPropostaHabilidadeDTO
        {
            PropostaId = PropostaId,
            HabilidadeId = habilidade.HabilidadeId,
            MinAnosExp = habilidade.MinAnosExp
        };
        mostrarFormularioHabilidade = true;
    }

    private async Task RemoverHabilidade(int habilidadeId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Tem certeza que deseja remover esta habilidade requerida?" }))
            return;

        var response = await PropostaHabilidadeService.RemoveHabilidadeFromPropostaAsync(PropostaId, habilidadeId);
        if (response.IsSuccessStatusCode)
        {
            await LoadHabilidades();
            ExibirMensagemSucesso("Habilidade removida com sucesso!");
        }
        else
        {
            var errorMsg = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Erro ao remover habilidade: {errorMsg}");
        }
    }

    private async Task HandleHabilidadeSubmit()
    {
        if (!editandoHabilidade && novaHabilidade.HabilidadeId == 0)
        {
            validacaoMensagemHabilidade = "Deve selecionar uma habilidade.";
            return;
        }
        
        if (novaHabilidade.MinAnosExp < 0 || novaHabilidade.MinAnosExp > 50)
        {
            validacaoMensagemHabilidade = "O número mínimo de anos de experiência deve estar entre 0 e 50.";
            return;
        }

        validacaoMensagemHabilidade = null;
        novaHabilidade.PropostaId = PropostaId;

        HttpResponseMessage response;

        if (editandoHabilidade)
        {
            var updateDto = new UpdatePropostaHabilidadeDTO
            {
                MinAnosExp = novaHabilidade.MinAnosExp
            };
            response = await PropostaHabilidadeService.UpdatePropostaHabilidadeAsync(PropostaId, habilidadeIdAtual, updateDto);
        }
        else
        {
            response = await PropostaHabilidadeService.AddHabilidadeToPropostaAsync(novaHabilidade);
        }

        if (response.IsSuccessStatusCode)
        {
            await LoadHabilidades();
            novaHabilidade = new();
            mostrarFormularioHabilidade = false;
            editandoHabilidade = false;
            ExibirMensagemSucesso(editandoHabilidade ? "Habilidade atualizada com sucesso!" : "Habilidade adicionada com sucesso!");
        }
        else
        {
            var errorMsg = await response.Content.ReadAsStringAsync();
            validacaoMensagemHabilidade = $"{errorMsg}";
            Console.WriteLine($"Erro ao {(editandoHabilidade ? "atualizar" : "adicionar")} habilidade");
        }
    }
    
    // Talento
    private bool mostrarFormularioTalento = false;
    private AddPropostaTalentoDTO novoTalento = new();
    private List<PropostaTalentoDTO> talentosSelecionados = new();
    private List<TalentoDTO> talentosFiltrados = new();
    private string? validacaoMensagemTalento;
    
    private void FiltrarTalentosPorHabilidades()
    {
        var idsHabilidadesSelecionadas = habilidadesRequeridas.Select(h => h.HabilidadeId).ToHashSet();

        talentosFiltrados = todosTalentos
            .Where(t => t.Habilidades.Any(th => idsHabilidadesSelecionadas.Contains(th.HabilidadeId)))
            .ToList();

        StateHasChanged();  // atualiza UI se necessário
    }

    private async Task RemoverTalento(int talentoId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja remover este talento da proposta?"))
            return;

        var response = await PropostaTalentoService.RemoveTalentoFromPropostaAsync(PropostaId, talentoId);
        if (response.IsSuccessStatusCode)
        {
            await LoadTalentos();
            ExibirMensagemSucesso("Talento removido com sucesso!");
        }
        else
        {
            var errorMsg = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Erro ao remover talento: {errorMsg}");
        }
    }

    private async Task HandleTalentoSubmit()
    {
        if (novoTalento.TalentoId == 0)
        {
            validacaoMensagemTalento = "Deve selecionar um talento.";
            return;
        }

        validacaoMensagemTalento = null;
        novoTalento.PropostaId = PropostaId;

        var response = await PropostaTalentoService.AddTalentoToPropostaAsync(novoTalento);

        if (response.IsSuccessStatusCode)
        {
            mostrarFormularioTalento = false;
            novoTalento = new AddPropostaTalentoDTO(); // limpar para próximo
            await LoadTalentos();
            ExibirMensagemSucesso("Talento adicionado com sucesso!");
        }
        else
        {
            validacaoMensagemTalento = await response.Content.ReadAsStringAsync();
        }
    }

    private async Task LoadTalentos()
    {
        talentosSelecionados = await PropostaTalentoService.GetTalentosByPropostaIdAsync(PropostaId) ?? new();
        todosTalentos = await TalentoService.GetAllTalentosAsync();
        FiltrarTalentosPorHabilidades();
    }

    private void ExibirMensagemSucesso(string mensagem)
    {
        mensagemSucesso = mensagem;
        timerMensagem = new System.Timers.Timer(3000);
        timerMensagem.Elapsed += (sender, args) =>
        {
            mensagemSucesso = string.Empty;
            InvokeAsync(StateHasChanged);
            timerMensagem.Dispose();
        };
        timerMensagem.Start();
    }
    private async Task OnEstadoChanged(int novoEstadoId)
    {
        estadoSelecionado = novoEstadoId;
        await AtualizarEstado();
    }

    private string GetBadgeClass(string? estado)
    {
        if (string.IsNullOrWhiteSpace(estado))
            return "bg-info";

        return estado.Trim().ToLower() switch
        {
            "ativo" => "bg-success",
            "pendente" => "bg-warning text-dark",
            "cancelado" => "bg-danger",
            _ => "bg-info"
        };
    }
}